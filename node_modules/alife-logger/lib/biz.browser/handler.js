module.exports = function(e, r, t) {
    var a = require("../util"), n = require("../common/res"), o = require("../common/perf"), i = null, s = t.documentElement, h = r.innerWidth || s.clientWidth || t.body.clientWidth, c = r.innerHeight || s.clientHeight || t.body.clientHeight, d = r.navigator.connection, l = {
        sr: screen.width + "x" + screen.height,
        vp: h + "x" + c,
        ct: d ? d.effectiveType || d.type : ""
    }, u = {}, g = function(e, r, n, o, i) {
        if (r === undefined) {
            var s, h;
            if (!u[e]) {
                s = new RegExp(e + "=([^;]+)");
                try {
                    h = s.exec(t.cookie);
                } catch (d) {
                    return a.warn("[retcode] can not get cookie:", d), null;
                }
                h && (u[e] = h[1]);
            }
            return u[e];
        }
        var c = e + "=" + r;
        o && (c += "; domain=" + o), c += "; path=" + (i || "/"), n && (c += "; max-age=" + n);
        try {
            return t.cookie = c, !!t.cookie;
        } catch (d) {
            return a.warn("[retcode] can not set cookie: ", d), !1;
        }
    }, f = function(e) {
        var r = e._conf.uid || g("_nk_") || g("_bl_uid");
        if (!r) {
            r = a.uu();
            if (!g("_bl_uid", r, 15552e3)) return null;
        }
        return r;
    };
    return a.ext(e.prototype, {
        activeErrHandler: function(e) {
            return i && !e ? this : (i = this, this);
        },
        errorHandler: function(e) {
            if (!e) return this;
            var r = e.type;
            if ("error" === r) {
                var t = e.target || e.srcElement;
                !(!t || !t.tagName || e.message || e.filename || e.lineno || e.colno) ? this.resourceErrorHandler(e) : this.error(e.error || {
                    message: e.message
                }, e);
            } else "unhandledrejection" === r && a.T(e.reason, "Error") && a.checkAutoError(e.reason) && this.error(e.reason);
            try {
                this.getConfig("behavior") && this.reportBehavior && this.reportBehavior();
            } catch (e) {}
            return this;
        },
        resourceErrorHandler: function(e) {
            var r = this, t = e.target || e.srcElement;
            try {
                var n = r.getSrc(t), o = t.tagName ? t.tagName.toLowerCase() : "", i = r.getXPath(t, 5);
                return r._lg("resourceError", {
                    src: n && n.substring(0, 1e3),
                    node_name: o,
                    xpath: i
                }), r;
            } catch (s) {
                return a.warn("[ARMS] resourceErrorHandler error :", s), r;
            }
        },
        getSrc: function(e) {
            var r = e.src || e.href;
            try {
                if (!r) {
                    var t = "object" === (e.tagName ? e.tagName.toLowerCase() : ""), a = e.getAttribute("classid") && "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" === e.getAttribute("classid").toLowerCase() || "application/x-shockwave-flash" === e.getAttribute("type");
                    t && a && (r = e.getAttribute("data") || e.getAttribute("codebase")), r || (r = e.outerHTML || e.innerHTML);
                }
            } catch (n) {
                r = "";
            }
            return r;
        },
        getXPath: function(e, r) {
            var t = e.id ? "#" + e.id : "", a = e.className ? "." + e.className.split(" ").join(".") : "", n = (e.tagName ? e.tagName.toLowerCase() : "") + t + a;
            return e.parentNode && e.parentNode.tagName && r - 1 != 0 ? this.getXPath(e.parentNode, r - 1) + " > " + n : n;
        },
        sendPerformance: function(e) {
            var r = this;
            r.onReady(function() {
                var t = o();
                t && (t.page = r.getPage(!0), e && (t = a.ext(t, e)), r.perfData && (t = a.ext(t, r.perfData)), 
                r.getConfig("autoSendPerf") ? (t.autoSend = !0, r.performance(t)) : r.perfData = t);
            });
        },
        sendResources: function(e) {
            var r = this;
            r.onReady(function() {
                var t = n();
                t && (t.load && t.load <= 2e3 || t.load && t.load <= 8e3 && Math.random() > .05 || (t.page = r.getPage(!0), 
                t.dl = location.href, e && (t = a.ext(t, e)), r._lg("res", t, r.getConfig("sample"))));
            });
        },
        sendPV: function() {
            var e = this;
            e.onReady(function() {
                var a = function(e) {
                    var a = f(e), n = r.devicePixelRatio || 1;
                    return {
                        uid: a,
                        dt: t.title,
                        dl: location.href,
                        dr: t.referrer,
                        dpr: n.toFixed(2),
                        de: (t.characterSet || t.defaultCharset || "").toLowerCase(),
                        ul: s.lang,
                        begin: Date.now()
                    };
                }(e);
                a && a.uid && e._lg("pv", a, e.getConfig("pvSample"));
            });
        },
        commonInfo: function() {
            return l.uid = f(this), l;
        },
        handleUnload: function(e) {
            var r = Date.now();
            if (r - this._lastUnload < 200) return this;
            this._lastUnload = r, this.sendHealth(e), this.speedCache && (this._lg("speed", this.speedCache), 
            this.speedCache = null, clearTimeout(this.speedTimmer)), this.clear();
        },
        bindHashChange: function(e) {
            var t = this;
            if (!e ^ t.hashChangeHandler) return t;
            e ? (t.hackHistoryState(), t.hashChangeHandler = function(e) {
                var r = t._conf.parseHash(location.hash);
                r && t.setPage(r, !1 !== e);
            }, t.stateChangeHandler = function(e) {
                var r = t._conf.parseHash(e.detail);
                r && t.setPage(r);
            }, a.on(r, "hashchange", t.hashChangeHandler), a.on(r, "historystatechange", t.stateChangeHandler), 
            t.hashChangeHandler(!1)) : (a.off(r, "hashchange", t.hashChangeHandler), a.off(r, "historystatechange", t.stateChangeHandler), 
            t.hashChangeHandler = null, t.stateChangeHandler = null);
        },
        initHandler: function() {
            var e = this;
            if (e.hasInitHandler) return e;
            var t = e._conf;
            return a.on(r, "beforeunload", function() {
                e.handleUnload(0);
            }), e.bindHashChange(t.enableSPA), e.activeErrHandler(!1), e.hasInitHandler = !0, 
            e;
        }
    }), a.on(r, "error", function(e) {
        i && i.errorHandler(e);
    }, !1, !0).on(r, "unhandledrejection", function(e) {
        i && i.errorHandler(e);
    }), e;
};