var util = require("./util"), Reporter = require("./reporter"), MiniProgramLogger = function(e) {
    e && e.pid || util.warn("[arms] pid is a required prop to instatiate MiniProgramLogger");
    var o = this;
    return Reporter.call(o, e), o._health = {
        errcount: 0,
        apisucc: 0,
        apifail: 0
    }, o.DEFAUT_PAGE_PATH = "[app]", o.isSendPerf = !1, o.beforeSend = function(e, t) {
        "error" === e ? o._health.errcount++ : "api" === e && o._health[t.success ? "apisucc" : "apifail"]++;
    }, "function" == typeof o.initHook && o.initHook(), o._conf && o._conf.behavior && "function" == typeof o.initBehavior && o.initBehavior(), 
    "function" == typeof o.autoSetCommonInfo && o.autoSetCommonInfo(), this;
};

MiniProgramLogger.prototype = util.createObject(Reporter.prototype), util.ext(Reporter._root.dftCon, {
    uid: null,
    disableHook: !1,
    enableLinkTrace: !1,
    behavior: !1,
    sendRequest: function() {},
    getCurrentPage: function() {}
}), util.ext(MiniProgramLogger.prototype, {
    constructor: MiniProgramLogger,
    _super: Reporter,
    onReady: function(e) {
        e();
    },
    sendRequest: function(e, o) {
        if (this.getConfig("debug")) "undefined" != typeof console && console && "function" == typeof console.log && console.log("[arms] [DEBUG MODE] log data", e); else {
            var t = this.getConfig("imgUrl");
            "object" == typeof e && (e = util.serialize(e));
            var n = t + e;
            o && (n += "&post_res=");
            var r = this._conf.sendRequest;
            if ("function" == typeof r) try {
                r(n, o);
            } catch (i) {
                util.warn("[arms] error in sendRequest", i);
            }
        }
    },
    postData: function(e, o) {
        var t = {};
        t[o] = e[o], delete e[o], this.sendRequest(e, t);
    },
    getPage: function() {
        var e = this._conf.getCurrentPage;
        if ("function" == typeof e) try {
            var o = e();
            if (o && "string" == typeof o) return o;
        } catch (t) {
            util.warn("[arms] error in getPage", t);
        }
        return "string" == typeof e && e ? e : this.DEFAUT_PAGE_PATH;
    },
    setConfig: function(e) {
        if (e && "object" == typeof e) {
            util.verifyConfig(e), e = this.setImgUrl(e);
            var o = this._conf;
            this._conf = util.ext({}, this._conf, e);
            var t = "disableHook";
            t in e && o[t] !== e[t] && (e[t] ? "function" == typeof this.removeHook && this.removeHook() : "function" == typeof this.addHook && this.addHook());
        }
    },
    pageShow: function() {
        var e = this;
        e.resetSession(), e.sendOncePerf(), clearTimeout(e.sendPVTimmer), e.sendHealthOnPageShowOrHide(), 
        e.sendPVTimmer = setTimeout(function() {
            e.sendPV();
        }, 50), e.sessionPage = e.getPage();
    },
    pageHide: function() {
        this.sendHealthOnPageShowOrHide();
    },
    addHook: function() {
        return this;
    },
    removeHook: function() {
        return this;
    },
    hookApp: function(e) {
        var o = this, t = {
            onError: function(t) {
                var n = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments), r = e.onError;
                try {
                    o.error(t), o.getConfig("behavior") && "function" == typeof o.reportBehavior && o.reportBehavior();
                } catch (t) {
                    util.warn("[arms] error in hookApp:onError", t);
                }
                if ("function" == typeof r) return r.apply(this, n);
            }
        };
        return util.ext({}, e, t);
    },
    hookPage: function(e) {
        var o = this, t = {
            onShow: function() {
                var t = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments), n = e.onShow;
                try {
                    o.pageShow();
                } catch (r) {
                    util.warn("[arms] error in hookPage:pageShow", r);
                }
                if ("function" == typeof n) return n.apply(this, t);
            },
            onHide: function() {
                var t = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments), n = e.onHide;
                try {
                    o.pageHide();
                } catch (r) {
                    util.warn("[arms] error in hookPage:onHide", r);
                }
                if ("function" == typeof n) return n.apply(this, t);
            },
            onUnload: function() {
                var t = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments), n = e.onUnload;
                try {
                    o.pageHide();
                } catch (r) {
                    util.warn("[arms] error in hookPage:onUnload", r);
                }
                if ("function" == typeof n) return n.apply(this, t);
            }
        };
        return util.ext({}, e, t);
    },
    initHook: function() {},
    autoSetCommonInfo: function() {
        this.setCommonInfo({
            app: "mini_common",
            uid: this._conf.uid
        });
    },
    sendPV: function() {
        var e = this;
        e.onReady(function() {
            e._lg("pv", {}, e.getConfig("pvSample"));
        });
    },
    sendOncePerf: function() {
        var e = this;
        e.isSendPerf || (e.onReady(function() {
            var o = {
                fpt: Date.now() - e.sBegin
            };
            e._lg("perf", o, e.getConfig("sample"));
        }), e.isSendPerf = !0);
    },
    sendHealthOnPageShowOrHide: function() {
        this.sendHealth(), this.speedCache && (this._lg("speed", this.speedCache), this.speedCache = null, 
        clearTimeout(this.speedTimmer)), this.clear();
    },
    sendHealth: function() {
        if (this.sessionPage) {
            var e = util.ext({}, this._health);
            e.healthy = e.errcount > 0 ? 0 : 1, e.begin = Date.now();
            var o = e.begin - this.sBegin;
            e.page = this.sessionPage, e.stay = o, this._lg("health", e, 1), this._health = {
                errcount: 0,
                apisucc: 0,
                apifail: 0
            }, this.sessionPage = null;
        }
    }
});

var singleton = null, generator = function(e) {
    return singleton || (singleton = new MiniProgramLogger(e || {})), singleton;
};

MiniProgramLogger.createExtraInstance = function(e) {
    e && "object" == typeof e ? (e.disableHook = !0, e.behavior = !1) : e = {
        disableHook: !0,
        behavior: !1
    };
    return new MiniProgramLogger(e);
}, MiniProgramLogger.init = generator, MiniProgramLogger.singleton = generator, 
MiniProgramLogger._super = Reporter, MiniProgramLogger._root = Reporter._root, Reporter.MiniProgramLogger = MiniProgramLogger, 
module.exports = MiniProgramLogger;