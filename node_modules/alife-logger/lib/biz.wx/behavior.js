var util = require("../util");

module.exports = function(o, n) {
    var t = null, e = "", i = function(o) {
        return function() {
            if (o && t) {
                var n = t, e = o + "timmer";
                n[e] && (clearTimeout(n[e]), n[e] = undefined), n[e] = setTimeout(function() {
                    "function" == typeof n.addBehavior && n.addBehavior({
                        type: "ui.default",
                        data: {
                            level: o
                        }
                    });
                }, 100);
            }
        };
    }, r = require("../common/miniBehavior")(o) || {};
    util.ext(o.prototype, {
        initBehavior: function() {
            if (!this.hasInitBehavior && !t && void 0 !== n && n) {
                try {
                    "function" == typeof r.consoleBehavior && r.consoleBehavior.call(this), n && ("function" == typeof n.onKeyboardHeightChange && n.onKeyboardHeightChange(i("KeyboardHeightChange")), 
                    "function" == typeof n.onPageNotFound && n.onPageNotFound(i("PageNotFound")), "function" == typeof n.onAppShow && n.onAppShow(i("AppShow")), 
                    "function" == typeof n.onAppHide && n.onAppHide(i("AppHide"))), n && "function" == typeof n.onAppRoute && n.onAppRoute(function(o) {
                        var n = {
                            type: "navigation",
                            data: {
                                level: o && o.openType || "unknown",
                                from: e || "unknown",
                                to: o && o.path || "unknown"
                            }
                        };
                        t && "function" == typeof t.addBehavior && t.addBehavior(n), e = o && o.path || "";
                    }), n && "function" == typeof n.onError && n.onError(this.reportBehavior.bind(this));
                } catch (o) {
                    util.warn("[arms] error in initBehavior", o);
                }
                return t = this, this.hasInitBehavior = !0, this;
            }
        }
    });
};