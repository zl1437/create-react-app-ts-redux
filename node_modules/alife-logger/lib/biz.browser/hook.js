module.exports = function(e, t) {
    var a = require("../util"), n = null, r = a.getCurDomain(), o = function(e, t, n, o, i, s, p, c, l, g) {
        var h = a.J(i) || null, u = a.safetyCall(t, [ h, o ], null);
        if (!u) return !1;
        var f = u.code || s, y = !("success" in u) || u.success;
        e.api(n, y, p, f, u.msg, c, l, g, {}, r);
    }, i = "fetch", s = "__oFetch_", p = "__oXMLHttpRequest_", c = "XMLHttpRequest";
    return a.ext(e.prototype, {
        removeHook: function(e, a) {
            return n && (a || this === n) ? (t[s] && (t[i] = t[s], delete t[s]), t[p] && (t[c] = t[p], 
            delete t[p]), n = null, this) : this;
        },
        addHook: function(e) {
            return !e && n ? this : (n || (function() {
                if ("function" == typeof t[i]) {
                    var e = t[i];
                    t[s] = e, t[i] = function(i, s) {
                        var p = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments), c = n;
                        if (!c || !c.api) return e.apply(t, p);
                        if (s && ("HEAD" === s.method || "no-cors" === s.mode)) return e.apply(t, p);
                        var l = Date.now(), g = c._conf, h = (i && "string" != typeof i ? i.url : i) || "", u = h;
                        if (h = a.cutUrlSearch(h), !a.checkAPI(h, !0)) return e.apply(t, p);
                        h = a.filterByRule(h, g.ignoreApiPath ? g.ignoreApiPath : g.apiHelper);
                        var f = g.enableLinkTrace, y = "", d = "", E = c.getConfig("pid");
                        if (f) {
                            var I = "";
                            try {
                                I = location.origin ? location.origin : location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "");
                            } catch (T) {
                                I = "";
                            }
                            if (a.checkSameOrigin(u, I)) {
                                if (i && "string" != typeof i) try {
                                    if (p[0].headers && "function" == typeof p[0].headers.get && "function" == typeof p[0].headers.append) {
                                        var D = p[0].headers.get("EagleEye-TraceID"), v = p[0].headers.get("EagleEye-SessionID"), S = p[0].headers.get("EagleEye-pAppName");
                                        D ? y = D : (y = c.getTraceId()["EagleEye-TraceID"], p[0].headers.append("EagleEye-TraceID", y)), 
                                        v ? d = v : (d = c.getSessionId()["EagleEye-SessionID"], p[0].headers.append("EagleEye-SessionID", d)), 
                                        S || p[0].headers.append("EagleEye-pAppName", E);
                                    }
                                } catch (m) {
                                    a.warn("[retcode] fetch failed to set header, exception is :\n" + m);
                                }
                                s && (s.headers = s.headers ? s.headers : {}, s.headers["EagleEye-TraceID"] ? y = s.headers["EagleEye-TraceID"] : (y = c.getTraceId()["EagleEye-TraceID"], 
                                s.headers["EagleEye-TraceID"] = y), s.headers["EagleEye-SessionID"] ? d = s.headers["EagleEye-SessionID"] : (d = c.getSessionId()["EagleEye-SessionID"], 
                                s.headers["EagleEye-SessionID"] = d), s.headers["EagleEye-pAppName"] || (s.headers["EagleEye-pAppName"] = E));
                            }
                        }
                        return e.apply(t, p).then(function(e) {
                            if (!c || !c.api) return e;
                            try {
                                if (!e || "function" != typeof e.clone) return e;
                                var t = e.clone(), n = t.headers;
                                if (n && "function" == typeof n.get) {
                                    var i = n.get("content-type");
                                    if (i && !/(text)|(json)/.test(i)) return e;
                                }
                                var s = Date.now() - l;
                                return t.text().then(function(e) {
                                    var i = a.getFetchSnapshot(p, e, n);
                                    t.ok ? o(c, g.parseResponse, h, u, e, t.status || 200, s, l, y, d) : c.api(h, !1, s, t.status || 404, t.statusText, l, y, d, i, r);
                                }), e;
                            } catch (T) {
                                return a.warn("[ARMS] fetch response error :", T), e;
                            }
                        })["catch"](function(e) {
                            if (!c || !c.api) throw e;
                            var t = Date.now() - l;
                            throw c.api(h, !1, t, e.name || "Error", e.message, l, y, d, {}, r), e;
                        });
                    }, t[i].toString = a.createFakeToString(i);
                }
            }(), function() {
                if ("function" == typeof t[c]) {
                    var e, i = t[c];
                    t[p] = i, t[c] = function(t) {
                        var s = new i(t), p = n;
                        if (!p || !p.api || !s.addEventListener) return s;
                        var c, l, g, h = s.send, u = s.open, f = s.setRequestHeader, y = p._conf, d = p.getConfig("enableLinkTrace"), E = "", I = "", D = "";
                        return s.open = function(t, n) {
                            e = t;
                            var r = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments);
                            if (u.apply(s, r), g = n || "", l = a.cutUrlSearch(g), l = l ? a.filterByRule(l, y.ignoreApiPath ? y.ignoreApiPath : y.apiHelper) : "", 
                            d) {
                                var o = "";
                                try {
                                    o = location.origin ? location.origin : location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "");
                                } catch (i) {
                                    o = "";
                                }
                                a.checkSameOrigin(g, o) && f && "function" == typeof f && (E = p.getTraceId()["EagleEye-TraceID"], 
                                f.apply(s, [ "EagleEye-TraceID", E ]), I = p.getSessionId()["EagleEye-SessionID"], 
                                f.apply(s, [ "EagleEye-SessionID", I ]), D = p.getConfig("pid"), f.apply(s, [ "EagleEye-pAppName", D ]));
                            }
                        }, s.send = function() {
                            c = Date.now();
                            var e = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments);
                            h.apply(s, e);
                        }, a.on(s, "readystatechange", function() {
                            if (l && 4 === s.readyState) {
                                var t = Date.now() - c, n = a.getXhrSnapshot(g, e, s);
                                if (s.status >= 200 && s.status <= 299) {
                                    var i = s.status || 200;
                                    if ("function" == typeof s.getResponseHeader) {
                                        var h = s.getResponseHeader("Content-Type");
                                        if (h && !/(text)|(json)/.test(h)) return;
                                    }
                                    s.responseType && "text" !== s.responseType ? p.api(l, !0, t, i, "", c, E, I, {}, r) : o(p, y.parseResponse, l, g, s.responseText, i, t, c, E, I);
                                } else p.api(l, !1, t, s.status || "FAILED", s.statusText, c, E, I, n, r);
                            }
                        }), s;
                    }, t[c].toString = a.createFakeToString(c);
                }
            }()), n = this, this);
        },
        initHook: function() {
            return this.hasInitHook ? this : (this.getConfig("disableHook") || this.addHook(), 
            this.hasInitHook = !0, this);
        }
    }), e;
};