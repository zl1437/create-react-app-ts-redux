var util = require("./util"), sendBeacon = require("./common/sendBeacon"), pushToQueue = function(e, t) {
    var i;
    {
        if ("error" !== t.t || !(i = e.requestQueue[0]) || "error" !== i.t || t.msg !== i.msg) {
            if ("behavior" === t.t) {
                var n = e.requestQueue && e.requestQueue.length;
                if (n > 0 && "behavior" === e.requestQueue[n - 1].t) {
                    var r = t.behavior || [];
                    e.requestQueue[n - 1].behavior.concat(r);
                } else e.requestQueue.push(t);
            } else e.requestQueue.unshift(t);
            return e.onReady(function() {
                e.requestTimmer = util.delay(function() {
                    e.clear();
                }, e.requestQueue[0] && "error" === e.requestQueue[0].t ? 3e3 : -1);
            }), !0;
        }
        i.times++;
    }
}, Base = function(e) {
    return this.ver = "1.8.3", this._conf = util.ext({}, Base.dftCon), this.sampleCache = {}, 
    this.requestQueue = [], this.hash = util.seq(), this.resetSession(), this.setConfig(e), 
    this.rip = util.getRandIP(), this.record = 999, this["EagleEye-TraceID"] = this.getTraceId()["EagleEye-TraceID"], 
    this._common = {}, this;
};

Base.dftCon = {
    sample: 1,
    pvSample: 1,
    tag: "",
    imgUrl: "https://arms-retcode.aliyuncs.com/r.png?",
    region: null,
    ignore: {
        ignoreUrls: [],
        ignoreApis: [],
        ignoreErrors: []
    },
    release: undefined,
    environment: "production"
}, Base.prototype = {
    constructor: Base,
    onReady: function(e) {
        return e();
    },
    getPage: function() {
        var e = this._conf.page;
        return util.safetyCall(e, [], e + "");
    },
    setPage: function() {},
    setConfig: function(e) {
        e && "object" == typeof e && (util.verifyConfig(e), e = this.setImgUrl(e), this._conf = util.ext({}, this._conf, e));
    },
    setImgUrl: function(e) {
        var t = e.region, i = e.imgUrl;
        if (t) {
            var n = util.regionMap[t];
            return e.imgUrl = n || util.defaultImgUrl, e;
        }
        return i && (e.imgUrl = i), e;
    },
    checkImgUrl: function(e) {
        if (this.getConfig("debug")) return !0;
        var t = util.regionMap, i = !1;
        for (var n in t) if (t[n] === e) {
            i = !0;
            break;
        }
        return !i && util.warn("[retcode] invalid url: " + e), i;
    },
    sendRequest: function() {},
    sendBeacon: function(e) {
        sendBeacon(e, this.getConfig("imgUrl"));
    },
    postData: function() {},
    commonInfo: function() {
        return {};
    },
    setCommonInfo: function(e) {
        e && "object" == typeof e && (this._common = util.ext({}, this._common, e));
    },
    resetSession: function() {
        this.session = util.uu(), this.sBegin = Date.now();
    },
    getTraceId: function() {
        var e = this.rip, t = Date.now(), i = util.getSortNum(this.record), n = e + t + i + util.getRandNum(this._conf.pid);
        return this["EagleEye-TraceID"] = n, this.record = i, {
            "EagleEye-TraceID": n
        };
    },
    getSessionId: function() {
        return {
            "EagleEye-SessionID": this.session
        };
    },
    getConfig: function(e) {
        return e ? this._conf[e] : util.ext({}, this._conf);
    },
    sampling: function(e) {
        return 1 === e || ("boolean" == typeof this.sampleCache[e] ? this.sampleCache[e] : (this.sampleCache[e] = util.pick(e), 
        this.sampleCache[e]));
    },
    clear: function() {
        var e;
        clearTimeout(this.requestTimmer), this.requestTimmer = null;
        for (var t = this._conf && "function" == typeof this._conf.sendRequest; e = this.requestQueue.pop(); ) "res" === e.t ? this.postData(e, "res") : "error" === e.t ? this.postData(e, "err") : "api" === e.t ? this.postData(e, "apiSnapshot") : "behavior" === e.t ? this.postData(e, "behavior") : "health" === e.t && !t && window && window.navigator && "function" == typeof window.navigator.sendBeacon ? this.sendBeacon(e) : this.sendRequest(e);
        return this;
    },
    _lg: function(e, t, i) {
        var n = this._conf, r = this.getPage(), s = n.ignore || {}, o = s.ignoreErrors, u = s.ignoreUrls, a = s.ignoreApis;
        return util.ignoreByRule(r, u) || util.ignoreByRule(util.decode(r), u) ? this : "error" === e && (util.ignoreByRule(t.msg, o) || util.ignoreByRule(util.decode(t.msg), o)) ? this : "api" === e && (util.ignoreByRule(t.api, a) || util.ignoreByRule(util.decode(t.api), a)) ? this : this.checkImgUrl(n.imgUrl) && t && !n.disabled && n.pid ? i && !this.sampling(i) ? this : (t = util.ext({
            t: e,
            times: 1,
            page: r,
            tag: n.tag || "",
            release: n.release || "",
            environment: n.environment,
            begin: Date.now()
        }, t, this.commonInfo(), this._common, {
            pid: n.pid,
            _v: this.ver,
            sid: this.session,
            sampling: i || 1,
            z: util.seq(),
            c1: n.c1,
            c2: n.c2,
            c3: n.c3
        }), pushToQueue(this, t)) : this;
    },
    custom: function(e, t) {
        if (!e || "object" != typeof e) return this;
        var i = !1, n = {
            begin: Date.now()
        };
        return util.each(e, function(e, t) {
            return !(i = t && t.length <= 20) && util.warn("[retcode] invalid key: " + t), n["x-" + t] = e, 
            i;
        }), i ? this._lg("custom", n, t || 1) : this;
    }
}, module.exports = Base;