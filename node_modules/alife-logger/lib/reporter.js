var util = require("./util"), Base = require("./base"), validApiKeys = [ "api", "success", "time", "code", "msg", "trace", "traceId", "begin", "sid", "seq", "domain" ], parseStatData = function(e, t) {
    var r = e.split("::");
    return r.length > 1 ? util.ext({
        group: r[0],
        key: r[1]
    }, t) : util.ext({
        group: "default_group",
        key: r[0]
    }, t);
}, Reporter = function(e) {
    Base.call(this, e);
    var t;
    try {
        t = "object" == typeof performance ? performance.timing.fetchStart : Date.now();
    } catch (r) {
        t = Date.now();
    }
    return this._startTime = t, this;
};

Reporter.prototype = util.createObject(Base.prototype), util.ext(Base.dftCon, {
    startTime: null
}), util.ext(Reporter.prototype, {
    constructor: Reporter,
    _super: Base,
    sum: function(e, t, r) {
        try {
            return this._lg("sum", parseStatData(e, {
                val: t || 1,
                begin: Date.now()
            }), r);
        } catch (i) {
            util.warn("[retcode] can not get parseStatData: " + i);
        }
    },
    avg: function(e, t, r) {
        try {
            return this._lg("avg", parseStatData(e, {
                val: t || 0,
                begin: Date.now()
            }), r);
        } catch (i) {
            util.warn("[retcode] can not get parseStatData: " + i);
        }
    },
    percent: function(e, t, r, i) {
        try {
            return this._lg("percent", parseStatData(e, {
                subkey: t,
                val: r || 0,
                begin: Date.now()
            }), i);
        } catch (a) {
            util.warn("[retcode] can not get parseStatData: " + a);
        }
    },
    msg: function(e, t) {
        if (e && !(e.length > 180)) return this.custom({
            msg: e
        }, t);
    },
    error: function(e, t) {
        if (!e) return util.warn("[retcode] invalid param e: " + e), this;
        1 === arguments.length ? ("string" == typeof e && (e = {
            message: e
        }, t = {}), "object" == typeof e && (t = e = e.error || e)) : ("string" == typeof e && (e = {
            message: e
        }), "object" != typeof t && (t = {}));
        var r = e.name || "CustomError", i = e.message || "", a = e.stack || "";
        t = t || {};
        var s = {
            begin: Date.now(),
            cate: r,
            msg: i && i.substring(0, 1e3),
            stack: a && a.substring(0, 1e3),
            file: util.removeUrlSearch(t.filename || ""),
            line: t.lineno || "",
            col: t.colno || "",
            err: {
                msg_raw: util.encode(i),
                stack_raw: util.encode(a)
            }
        }, n = (this.getConfig("ignore") || {}).ignoreErrors;
        return util.ignoreByRule(s.msg, n) || util.ignoreByRule(util.decode(s.msg), n) ? this : (this.beforeSend && this.beforeSend("error", s), 
        this._lg("error", s, 1));
    },
    behavior: function(e) {
        if (e) {
            var t = "object" == typeof e && e.behavior ? e : {
                behavior: e
            };
            return this.beforeSend && this.beforeSend("behavior", t), this._lg("behavior", t, 1);
        }
    },
    api: function(e, t, r, i, a, s, n, o, u, c) {
        if (!e) return util.warn("[retcode] api is null"), this;
        if (e = "string" == typeof e ? {
            api: e,
            success: t,
            time: r,
            code: i,
            msg: a,
            begin: s,
            traceId: n,
            sid: o,
            domain: c
        } : util.sub(e, validApiKeys), !util.checkAPI(e.api)) return this;
        if (e.code = e.code || "", e.msg = e.msg || "", e.success = e.success ? 1 : 0, e.time = +e.time, 
        e.begin = e.begin, e.traceId = e.traceId || "", e.sid = e.sid || "", e.domain = e.domain || "", 
        e.success ? e.apiSnapshot && delete e.apiSnapshot : e.apiSnapshot = u, !e.api || isNaN(e.time)) return util.warn("[retcode] invalid time or api"), 
        this;
        var p = (this.getConfig("ignore") || {}).ignoreApis;
        if (util.ignoreByRule(e.api, p) || util.ignoreByRule(util.decode(e.api), p)) return this;
        this.beforeSend && this.beforeSend("api", e);
        var l = {
            type: "api",
            data: {
                message: e.msg,
                url: e.api,
                status: e.code
            },
            timestamp: e.begin
        };
        try {
            this.getConfig("behavior") && this.addBehavior && this.addBehavior(l);
        } catch (g) {}
        return this._lg("api", e, e.success && this.getConfig("sample"));
    },
    speed: function(e, t, r) {
        var i = this, a = this.getConfig("startTime") || this._startTime;
        return /^s(\d|1[0])$/.test(e) ? (t = "number" != typeof t ? Date.now() - a : t >= a ? t - a : t, 
        i.speedCache = i.speedCache || {}, i.speedCache[e] = t, i.speedCache.begin = a, 
        clearTimeout(i.speedTimmer), i.speedTimmer = setTimeout(function() {
            r || (i.speedCache.page = i.getPage(!0)), i._lg("speed", i.speedCache), i.speedCache = null;
        }, 5e3), i) : (util.warn("[retcode] invalid point: " + e), i);
    },
    performance: function(e) {
        if (e && "object" == typeof e) {
            var t = {}, r = this.getConfig("autoSendPerf");
            if (r && e.autoSend && !this.hasSendPerf) return this.hasSendPerf = !0, this._lg("perf", e, this.getConfig("sample"));
            for (var i in e) (/^t([1-9]|1[0])$/.test(i) || "ctti" === i || "cfpt" === i) && (t[i] = e[i]);
            if (r && !0 !== e.autoSend) this.perfData = util.ext(this.perfData || {}, t); else if (!1 === r && !this.hasSendPerf) {
                if (!this.perfData || "object" != typeof this.perfData) return;
                return t = util.ext(this.perfData, t), this.hasSendPerf = !0, this._lg("perf", t, this.getConfig("sample"));
            }
        }
    },
    resource: function(e, t) {
        if (!e || !util.isPlainObject(e)) return util.warn("[arms] invalid param data: " + e), 
        this;
        var r = Object.keys(e), i = [ "begin", "dom", "load", "res", "dl" ], a = !1;
        for (var s in i) {
            if (r.indexOf(i[s]) < 0) {
                a = !0;
                break;
            }
        }
        if (a) return util.warn("[arms] lack param data: " + e), this;
        var n = {
            begin: e.begin || Date.now(),
            dom: e.dom || "",
            load: e.load || "",
            res: util.isArray(e.res) ? JSON.stringify(e.res) : JSON.stringify([]),
            dl: e.dl || ""
        };
        return this._lg("res", n, t);
    }
}), Reporter._super = Base, Reporter._root = Base, Base.Reporter = Reporter, module.exports = Reporter;